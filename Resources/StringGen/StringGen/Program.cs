using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;


namespace StringGen
{
    class Program
    {
        static void Main(string[] args)
        {
            Gen();
        }

        static void Gen()
        {
            string currentDir = Directory.GetCurrentDirectory();
            bool correctFolder = false;
            foreach (string file in Directory.EnumerateFiles(currentDir))
            {
                if (Path.GetExtension(file) == ".mgcb")
                {
                    correctFolder = true;
                    break;
                }
            }

            if (!correctFolder)
            {
                throw new Exception("Program is placed in the wrong folder, place in Content folder and run again.");
            }
            
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("/* Generated by StringGen.exe */");
            builder.AppendLine("public static class Strings");
            builder.AppendLine("{");
            
            AddStrings(ref builder, currentDir);
            
            builder.AppendLine("}");

            Console.WriteLine(builder);
            
            string codeDir = string.Format("{0}/../ContentPaths.cs", currentDir);
            File.WriteAllText(codeDir, builder.ToString());
        }

        static void AddStrings(ref StringBuilder builder, string currentDir)
        {
            builder.AppendLine("\t public static class Content");
            builder.AppendLine("\t {");

            AddContent(currentDir, ref builder, 2, "\t\t");

            builder.AppendLine("\t }");
        }

        static void AddContent(string path, ref StringBuilder builder, int indentation, string fileTabs)
        {
            string currentDir = Directory.GetCurrentDirectory();

            string tabs = string.Empty;
            for (int i = 0; i < indentation; i++)
                tabs += "\t";

            foreach (string file in Directory.EnumerateFiles(path))
            {
                string ext = Path.GetExtension(file);
                if (ext == ".mgcb" || ext == ".cs" || ext == ".exe" || ext == ".vshost")
                    continue;

                ext = ext.Replace(".", "").ToUpper();
                string fieldName = Path.ChangeExtension(Path.GetFileName(file), null).Trim() + ext;
                string fieldValue = Path.ChangeExtension(file.Replace(currentDir, ""), null).TrimStart('\\').Replace(@"\", "/");
                builder.AppendLine(fileTabs + string.Format("public const string {0} = \"{1}\";", fieldName.Replace(" ", string.Empty), fieldValue));
            }
            
            foreach (string dir in Directory.EnumerateDirectories(path))
            {
                string upFolder = Path.GetFileName(dir);
                if (upFolder == "obj" || upFolder == "bin")
                    continue;

                indentation++;
                builder.AppendLine(tabs + string.Format("public static class {0}", upFolder));
                builder.AppendLine(tabs + "{");
                AddContent(dir, ref builder, indentation, tabs + "\t");
                builder.AppendLine(tabs + "}");
            }
        }
    }

    
}
